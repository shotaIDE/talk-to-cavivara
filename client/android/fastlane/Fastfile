# frozen_string_literal: true

import '../../fastlane/Fastfile'

default_platform(:android)

platform :android do
  desc 'Dev環境向けアプリ(App Bundle)をビルドします。'
  lane :build_dev do
    flavor = 'dev'

    build(flavor: flavor)
  end

  desc 'Prod環境向けアプリ(App Bundle)をビルドします。'
  lane :build_prod do
    flavor = 'prod'

    build(flavor: flavor)
  end

  desc 'Dev環境向けアプリをGoogle Playにデプロイします。'
  lane :deploy_dev do
    package_name = 'ide.shota.colomney.CavivaraTalk.dev'
    # action で利用するパスなので、fastlane コマンドを実行するディレクトリからの相対パスで指定
    google_play_json_key_path = 'fastlane/google-play-service-account-key.json'
    release_notes_path = 'metadata/android/ja-JP/changelogs/default.txt'
    backup_release_notes_path = "#{release_notes_path}.bak"

    # リリースノートファイルが存在する場合はバックアップを作成
    if File.exist?(release_notes_path)
      FileUtils.cp(release_notes_path, backup_release_notes_path)
      UI.message("Backed up the committed release notes: #{backup_release_notes_path}")
    end

    begin
      release_notes = generate_release_notes

      # Google Playのリリースノートにおける文字数制限に対応
      trimmed_release_notes = release_notes[0...500]
      UI.message("Trimmed release notes to 500 characters")

      File.write(release_notes_path, trimmed_release_notes)

      build_dev

      upload_to_play_store(
        package_name:,
        release_status: 'completed',
        track: 'internal',
        json_key: google_play_json_key_path,
        # Prod用のメタデータやスクリーンショットがリポジトリにはコミットされているため、
        # Dev向けにはアップロードしないようにする。
        skip_upload_metadata: true,
        skip_upload_changelogs: false,
        skip_upload_images: true,
        skip_upload_screenshots: true
      )
    ensure
      # 処理が終了したら、バックアップがある場合は元に戻す
      if File.exist?(backup_release_notes_path)
        FileUtils.cp(backup_release_notes_path, release_notes_path)
        FileUtils.rm(backup_release_notes_path)
        UI.message("Reverted the committed release notes to the original state: #{release_notes_path}")
      end
    end
  end

  desc 'Prod環境向けアプリをGoogle Playにデプロイします。'
  lane :deploy_prod do
    package_name = 'ide.shota.colomney.FlutterFirebaseBase'
    # action で利用するパスなので、fastlane コマンドを実行するディレクトリからの相対パスで指定
    google_play_json_key_path = 'fastlane/google-play-service-account-key.json'

    build_prod

    upload_to_play_store(
      package_name:,
      release_status: 'completed',
      track: 'internal',
      json_key: google_play_json_key_path,
      # 後続の「製品版」(production)へのプロモート時にメディアファイルをアップロードするため、
      # 重複を避けるためにメディアファイルのアップロードはスキップする
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )

    version_code = get_version_code
    upload_to_play_store(
      package_name:,
      version_code:,
      skip_upload_aab: true,
      track: 'internal',
      json_key: google_play_json_key_path,
      track_promote_to: 'production',
      track_promote_release_status: 'completed'
    )
  end

  private_lane :build do |options|
    flavor = options[:flavor]
    dart_defines_path = options[:dart_defines_path]

    build_variant = "#{flavor}Release"
    app_name = "app-#{flavor}-release"

    dart_defines_command_part = if dart_defines_path.nil?
                                  ''
                                else
                                  "--dart-define-from-file '#{dart_defines_path}'"
                                end

    Dir.chdir('../../') do
      sh(
        'flutter build appbundle '\
        "--flavor #{flavor} "\
        "#{dart_defines_command_part}"
      )
    end

    lane_context[SharedValues::GRADLE_AAB_OUTPUT_PATH] =\
      "../build/app/outputs/bundle/#{build_variant}/#{app_name}.aab"
  end
end
